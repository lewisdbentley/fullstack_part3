{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","id","request","axios","get","nonExisting","date","then","response","data","concat","newObject","post","put","Notification","message","style","Footer","props","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setMessage","messageStyle","setMessageStyle","useEffect","noteService","initialNotes","find","n","changedNote","returnedNote","console","log","map","catch","error","setTimeout","filter","notesToShow","successMessage","color","fontSize","fontStyle","whichMessage","key","onSubmit","event","preventDefault","noteObject","Math","random","Date","toISOString","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2dbc531d.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important\n      ? 'Make not important' : 'Make important'\n\n    return (\n      <>\n        <li className='note'>\n          {note.content}\n          <button onClick={() => toggleImportance(note.id)}>{label}</button>\n        </li>\n      </>\n    )\n  }\n\n  export default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id: 1000,\n        content: \"This note doesn't exist\",\n        date: '2019-05-30T17:30:31.098Z',\n        important: true\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (newObject, id) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","import React from 'react'\n\nconst Notification = ({message, style}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div style={style}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = (props) => {\n    return (\n        <div style={props.style}>\n            <p>a program by lewis bentley</p>\n        </div>\n    )\n}\n\nexport default Footer","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport axios from 'axios'\nimport './index.css'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\n\nconst App = (props) => {\n    const [notes, setNotes] = useState(props.notes)\n    const [newNote, setNewNote] = useState(\n        'a new note...'\n    )\n    const [showAll, setShowAll] = useState(false)\n    const [message, setMessage] = useState('')\n    const [messageStyle, setMessageStyle] = useState(true)\n\n    useEffect(() => {\n        noteService\n        .getAll()\n        .then(initialNotes => {\n            setNotes(initialNotes)\n        })\n    }, [])\n\n    const toggleImportance = (id) => {\n        // define the url of our note\n        let url = `http://localhost:3001/notes/${id}`\n        // find our note\n        let note = notes.find(n => n.id === id)\n        // store our note in a variable, and change important\n        let changedNote = {...note, important: !note.important}\n        // sent this PUT request to the server\n        noteService\n            .update(changedNote, id)\n            .then(returnedNote => {\n                console.log(`${changedNote.content} is now ${changedNote.important}`)\n                setNotes(notes.map(note => note.id !== id ? note : changedNote))\n            })\n            .catch((error) => {\n                setMessageStyle(false)\n                setMessage(\n                    `We tried to update ${note.content} but encountered an error`\n                )\n                setTimeout(() => {\n                    setMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    // console.log('You just created', notes.slice(-1)[0].content, 'which is', notes.slice(-1)[0].important === true)\n    \n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            important: Math.random() < 0.5,\n            date: new Date().toISOString,\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                console.log(`created ${returnedNote.content}`)\n                setMessageStyle(true)\n                setMessage(`Successfully created ${noteObject.content}`)\n                setTimeout(() => {\n                    setMessage(null)\n                }, 5000)\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    }\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n    }\n\n    const successMessage = {\n        color: 'green',\n        fontSize: 16,\n        fontStyle: 'italic',\n    }\n\n    const errorMessage = {\n        color: 'red',\n        fontSize: 16,\n        fontStyle: 'italic',\n    }\n\n    const whichMessage = messageStyle\n        ? successMessage\n        : errorMessage\n\n\n    return (\n        <>\n            <h1>Notes</h1>\n            < Notification message={message} style={whichMessage}/>\n            <button onClick={() => setShowAll(!showAll)}>\n                    show { showAll ? 'important' : 'all'}\n            </button>\n            <ul>\n                {notesToShow.map(note =>\n                    < Note key={note.id} note={note} toggleImportance={toggleImportance}/>\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">Save</button>\n                < Footer style={successMessage}/>\n            </form>\n        </>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\nconst notes = [\n    {\n      id: '1',\n      content: 'this is a new note',\n      date: '17-05-2020',\n      important: true\n    },\n    {\n      id: '2',\n      content: 'tussle',\n      date: '17-05-2020',\n      important: false\n    },\n    {\n      id: '3',\n      content: 'Hebrew note',\n      date: '17-05-2020',\n      important: true\n    },\n    {\n      id: '4',\n      content: 'Delicious!!!',\n      date: '17-05-2020',\n      important: true\n    },\n  ]\n\nReactDOM.render(< App notes={notes}/>, document.getElementById('root'))"],"sourceRoot":""}